Boston
names(Boston)
names(Boston)
fix(Boston)
?Boston
??Boston
View(Boston)
View(Boston)
Boston{MASS}
library(MASS)
Boston
boston=Boston
View(boston)
View(boston)
library ( randomForest)
?randomforest
??randomforest
??randomForest
library (randomForest)
?randomForest
tempTrain=train[,0:100]
train=Train
train=train[-1,]
names(train)[1]='class'
train[,2]=as.numeric(train[,2])
train[,3]=as.numeric(train[,3])
train[,2:74]=train[,75:147]-train[,2:74]
train=train[,1:74]
tempTrain=train[,0:100]
Train <- read.delim('D:/cs498ML/hw3/pubfig_dev_50000_pairs.txt', header=FALSE)
train=Train
train=train[-1,]
names(train)[1]='class'
train[,2]=as.numeric(train[,2])
train[,3]=as.numeric(train[,3])
train[,2:74]=train[,75:147]-train[,2:74]
train=train[,1:74]
tempTrain=train[,0:100]
tempTrain=train[0:100,]
View(tempTrain)
tempTrainLabel=tempTrain[,0]
View(tempTrainLabel)
View(tempTrainLabel)
tempTrainLabel=tempTrain[,1]
tempTrainData=tempTrain[,-1]
View(tempTrainData)
rf=randomForest(formula=tempTrainLabel,data=tempTrainData,type='classification',mtry=5)
rf=randomForest(medv~.,data=tempTrainData,type='classification',mtry=5)
rf=randomForest(tempTrainLabel,data=tempTrainData,type='classification',mtry=5)
rf=randomForest(tempTrainLabel,data=tempTrainData,type='classification',mtry=5)
View(tempTrain)
tempTrain=train[1:100,]
tempTrainLabel=tempTrain[,1]
tempTrainData=tempTrain[,-1]
rf=randomForest(tempTrainLabel,data=tempTrainData,type='classification',mtry=5)
#3.5
wine.data=read.csv("D:/cs498ML/hw4/wine.data", header = FALSE)
#3.5.1
a=cov(wine.data)
eigen(a)
wine.species<-wine.data[,1]
wine.pca <- prcomp(wine.data[, -c(1)], center = TRUE, scale = TRUE)
wine.pca.eigenvector <- t(wine.pca$rotation)
wine.pca.score <- wine.pca$x
wine.pca.sd = wine.pca$sdev
pca.eigenvector
wine.pca.eigenvector
install.packages(lm)
install.packages(lm)
install.packages("lm")
install.packages("glmnet")
install.packages("lm")
default_features_1059_tracks <- read.csv("D:/cs498ML/hw6/Geographical Original of Music/Geographical Original of Music/default_features_1059_tracks.txt", header=FALSE)
View(default_features_1059_tracks)
default_features_1059_tracks <- read.csv("D:/cs498ML/hw6/Geographical Original of Music/Geographical Original of Music/default_features_1059_tracks.txt", header=FALSE)
View(default_features_1059_tracks)
a=default_features_1059_tracks;
a
points(age,logwage,cex=.25)
install.packages("np")
library(np) # non parametric library
data(cps71)
attach(cps71)
m <- npreg(logwage~age)
plot(m,plot.errors.method="asymptotic",
plot.errors.style="band",
ylim=c(11,15.2))
points(age,logwage,cex=.25)
armstrong.2002.v1_database <- read.delim("D:/cs498ML/hw9/armstrong-2002-v1_database.txt", header=FALSE)
View(armstrong.2002.v1_database)
title("Multinomial Family",line=2.5)
n=500;p=30
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta3=matrix(rnorm(30),10,3)
beta3=rbind(beta3,matrix(0,p-10,3))
f3=x%*% beta3
p3=exp(f3)
p3=p3/apply(p3,1,sum)
g3=rmult(p3)
set.seed(10101)
cvfit=cv.glmnet(x,g3,family="multinomial")
plot(cvfit)
title("Multinomial Family",line=2.5)
set.seed(1010)
n=1000;p=100
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta=rnorm(nzc)
fx= x[,seq(nzc)] %*% beta
eps=rnorm(n)*5
y=drop(fx+eps)
px=exp(fx)
px=px/(1+px)
ly=rbinom(n=length(px),prob=px,size=1)
set.seed(1011)
cvob1=cv.glmnet(x,y)
plot(cvob1)
coef(cvob1)
predict(cvob1,newx=x[1:5,], s="lambda.min")
title("Gaussian Family",line=2.5)
set.seed(1011)
cvob1a=cv.glmnet(x,y,type.measure="mae")
plot(cvob1a)
title("Gaussian Family",line=2.5)
set.seed(1011)
par(mfrow=c(2,2),mar=c(4.5,4.5,4,1))
cvob2=cv.glmnet(x,ly,family="binomial")
plot(cvob2)
title("Binomial Family",line=2.5)
frame()
set.seed(1011)
cvob3=cv.glmnet(x,ly,family="binomial",type.measure="class")
plot(cvob3)
title("Binomial Family",line=2.5)
set.seed(1011)
cvob3a=cv.glmnet(x,ly,family="binomial",type.measure="auc")
plot(cvob3a)
title("Binomial Family",line=2.5)
set.seed(1011)
mu=exp(fx/10)
y=rpois(n,mu)
cvob4=cv.glmnet(x,y,family="poisson")
plot(cvob4)
title("Poisson Family",line=2.5)
# Multinomial
n=500;p=30
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta3=matrix(rnorm(30),10,3)
beta3=rbind(beta3,matrix(0,p-10,3))
f3=x%*% beta3
p3=exp(f3)
p3=p3/apply(p3,1,sum)
g3=rmult(p3)
set.seed(10101)
cvfit=cv.glmnet(x,g3,family="multinomial")
plot(cvfit)
title("Multinomial Family",line=2.5)
clear
set.seed(1010)
n=1000;p=100
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta=rnorm(nzc)
fx= x[,seq(nzc)] %*% beta
eps=rnorm(n)*5
y=drop(fx+eps)
px=exp(fx)
px=px/(1+px)
ly=rbinom(n=length(px),prob=px,size=1)
set.seed(1011)
cvob1=cv.glmnet(x,y)
plot(cvob1)
coef(cvob1)
predict(cvob1,newx=x[1:5,], s="lambda.min")
title("Gaussian Family",line=2.5)
set.seed(1011)
cvob1a=cv.glmnet(x,y,type.measure="mae")
plot(cvob1a)
title("Gaussian Family",line=2.5)
set.seed(1011)
par(mfrow=c(2,2),mar=c(4.5,4.5,4,1))
cvob2=cv.glmnet(x,ly,family="binomial")
plot(cvob2)
title("Binomial Family",line=2.5)
frame()
set.seed(1011)
cvob3=cv.glmnet(x,ly,family="binomial",type.measure="class")
plot(cvob3)
title("Binomial Family",line=2.5)
set.seed(1011)
cvob3a=cv.glmnet(x,ly,family="binomial",type.measure="auc")
plot(cvob3a)
title("Binomial Family",line=2.5)
set.seed(1011)
mu=exp(fx/10)
y=rpois(n,mu)
cvob4=cv.glmnet(x,y,family="poisson")
plot(cvob4)
title("Poisson Family",line=2.5)
# Multinomial
n=500;p=30
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta3=matrix(rnorm(30),10,3)
beta3=rbind(beta3,matrix(0,p-10,3))
f3=x%*% beta3
p3=exp(f3)
p3=p3/apply(p3,1,sum)
g3=rmult(p3)
set.seed(10101)
cvfit=cv.glmnet(x,g3,family="multinomial")
plot(cvfit)
title("Multinomial Family",line=2.5)
require("glmnet")
require("gdata")
set.seed(1010)
n=1000;p=100
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta=rnorm(nzc)
fx= x[,seq(nzc)] %*% beta
eps=rnorm(n)*5
y=drop(fx+eps)
px=exp(fx)
px=px/(1+px)
ly=rbinom(n=length(px),prob=px,size=1)
set.seed(1011)
cvob1=cv.glmnet(x,y)
plot(cvob1)
coef(cvob1)
predict(cvob1,newx=x[1:5,], s="lambda.min")
title("Gaussian Family",line=2.5)
set.seed(1011)
cvob1a=cv.glmnet(x,y,type.measure="mae")
plot(cvob1a)
title("Gaussian Family",line=2.5)
set.seed(1011)
par(mfrow=c(2,2),mar=c(4.5,4.5,4,1))
cvob2=cv.glmnet(x,ly,family="binomial")
plot(cvob2)
title("Binomial Family",line=2.5)
frame()
set.seed(1011)
cvob3=cv.glmnet(x,ly,family="binomial",type.measure="class")
plot(cvob3)
title("Binomial Family",line=2.5)
set.seed(1011)
cvob3a=cv.glmnet(x,ly,family="binomial",type.measure="auc")
plot(cvob3a)
title("Binomial Family",line=2.5)
set.seed(1011)
mu=exp(fx/10)
y=rpois(n,mu)
cvob4=cv.glmnet(x,y,family="poisson")
plot(cvob4)
title("Poisson Family",line=2.5)
# Multinomial
n=500;p=30
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta3=matrix(rnorm(30),10,3)
beta3=rbind(beta3,matrix(0,p-10,3))
f3=x%*% beta3
p3=exp(f3)
p3=p3/apply(p3,1,sum)
g3=rmult(p3)
set.seed(10101)
cvfit=cv.glmnet(x,g3,family="multinomial")
plot(cvfit)
title("Multinomial Family",line=2.5)
require("glmnet")
require("gdata")
# Multinomial
n=500;p=30
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta3=matrix(rnorm(30),10,3)
beta3=rbind(beta3,matrix(0,p-10,3))
f3=x%*% beta3
p3=exp(f3)
p3=p3/apply(p3,1,sum)
g3=rmult(p3)
set.seed(10101)
cvfit=cv.glmnet(x,g3,family="multinomial")
plot(cvfit)
title("Multinomial Family",line=2.5)
require("glmnet")
require("gdata")
# Multinomial
n=500;p=30
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
beta3=matrix(rnorm(30),10,3)
beta3=rbind(beta3,matrix(0,p-10,3))
f3=x%*% beta3
p3=exp(f3)
p3=p3/apply(p3,1,sum)
g3=rmult(p3)
set.seed(10101)
cvfit=cv.glmnet(x,g3,family="multinomial")
plot(cvfit)
title("Multinomial Family",line=2.5)
?rnorm
?matrix
rnorm(n*p)
typeof(rnorm(n*p))
require("glmnet")
require("gdata")
require("glmnet")
require("gdata")
n=500;p=30
nzc=trunc(p/10)
x=matrix(rnorm(n*p),n,p)
View(x)
?rbind
beta3=matrix(rnorm(30),10,3)
View(beta3)
beta3=rbind(beta3,matrix(0,p-10,3))
f3=x%*% beta3
View(f3)
?exp
p3=exp(f3)
View(p3)
?apply
1.08e-2+2.145e+2+4.535e-2
1.08e-2/214.6
p3=p3/apply(p3,1,sum)
?rmult
?set.seed
g3=rmult(p3)
g3
typeof(g3)
is.matrix(g3)
is.vector(g3)
set.seed(10101)
cvfit=cv.glmnet(x,g3,family="multinomial")
plot(cvfit)
bhattacharjee.2001_database <- read.delim("D:/cs498ML/hw9/bhattacharjee-2001_database.txt", header=FALSE)
View(bhattacharjee.2001_database)
armstrong.2002.v1_database <- read.delim("D:/cs498ML/hw9/armstrong-2002-v1_database.txt", header=FALSE)
View(armstrong.2002.v1_database)
a=armstrong.2002.v1_database
str(a)
`dyrskjot.2003_database.(1)` <- read.delim("D:/cs498ML/hw9/dyrskjot-2003_database (1).txt", header=FALSE)
View(`dyrskjot.2003_database.(1)`)
require("glmnet")
require("gdata")
setwd('D:\cs498ML\hw6\assignment6')
setwd('D://cs498ML//hw6//assignment6')
data <- read.xls('default_of_credit_card_clients.xls', method = "csv", header = FALSE)
data <- read.xls('default_of_credit_card_clients.xls', method = "csv", header = FALSE)
require("glmnet")
require("gdata")
setwd('D://cs498ML//hw6//assignment6')
data <- read.xls('default_of_credit_card_clients.xls', method = "csv", header = FALSE)
data <- read.xls('default_of_credit_card_clients.xls', method = "csv", header = FALSE)
data <- read.xls('default_of_credit_card_clients', method = "csv", header = FALSE)
data <- read.xls('default_of_credit_card_clients', header = FALSE)
data <- read.xls('default_of_credit_card_clients', perl,header = FALSE)
data <- read.xls('default_of_credit_card_clients', perl,header = FALSE)
data <- read.xls('default_of_credit_card_clients', perl='D://perl//bin//perl.exe',header = FALSE)
